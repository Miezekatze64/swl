WARNING: the compiler currently only supports LINUX x86_64 systems, for
other compilation targets please add your own equivalent of
codegen_x86_64_linux.rs and maybe even create a pull request. WARNING:
beacause of syscall incompatibility, new targets also have to come with
their own stdlib, replacing linux.swl (currently in std.swl)` WARNING:
this compiler is currently at a very, very early state of development,
do not expect anything to work as you want it to....

* Getting started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:
- install the following dependencies:

  - nasm (netwide assembler)

- clone this repo

#+begin_example
  git clone https://github.com/Miezekatze64/swl
#+end_example

- run the compiler

#+begin_example
  ./swlc main.swl
#+end_example

* Primitive Types:
:PROPERTIES:
:CUSTOM_ID: primitive-types
:END:
- int     (64 bit signed integer)

- float (not fully implemented)

- bool (8 bit, 0 or 1)

- char (8 bit)

- void (0 bit, should not be used as type)

- unchecked (will be removed, if type variables are fully implemented)

* Basic Syntax
:PROPERTIES:
:CUSTOM_ID: basic-syntax
:END:
- Comments:

  #+begin_example
  // single-line comment
  /*
  multi
  line
  comment
  */
  #+end_example

- Operators:

  #+begin_example
  int a = 0;
  a += 42 / 132;
  bool b = a == 42;
  bool c = !(b != false);
  ...
  #+end_example

- Variables:

  #+begin_example
  string test = "Hello, World!";
  #+end_example

- Conditional statements:

  - if:

    #+begin_example
    if (1 == 1) {
        println("is true");
    } else {
        // else is currently not implemented..., but will be soon
        println("THIS IS NOT POSSIBLE");
    }
    #+end_example

  - while:

    #+begin_example
    while (true) {
        println("HERE");
    }
    #+end_example

- Functions:

  #+begin_example
  func name(int arg0, string arg1) -> bool {
      // function content
  }
  #+end_example

- Return:

  #+begin_example
  func main() -> int {
      // return 42
      <- 42;
  }
  #+end_example

- Type-Aliases:

  #+begin_example
    alias string = [char];
  #+end_example

- Structures:

  - Definition:

    #+begin_example
    struct LinedList {
        LinkedList*  next;
        LinkdexList* prev;
        int len;
        int index;
    }
    #+end_example

  - Initialization:

    #+begin_example
    LinkedList list = LinkedList {
        next: next_list;
        prev: prev_list;
        len: 42;
        index: 0;
    };
    #+end_example

  - Reading values:.

    #+begin_example
    LinkedList list = /*  something */;
    int a = list.len;
    #+end_example

- Member functions:

  #+begin_example
  include "./std.swl"

  func to_string(bool self) -> string from bool {
      if (self) {
          return "true";
      }
      return "false";
  }

  func main() -> int {
      println(0.to_string();
      <- 0;
  }
  #+end_example

- Type variable (currently under development):

  #+begin_example
  // type variabled have to start with an underscore ('_') and are inferred by the compiler
  func id(_a a) -> _a {
      <- a;
  }
  #+end_example

- Type classes (currently under development):

  #+begin_example
  typeclass Showable a {
      func to_string(a val) -> string;
  }
  #+end_example

- Type class instances:

  #+begin_example
  instance Showable bool {
      func to_string(bool b) -> string {
          if (b) {
              <- "true";
          } else {
              <- "false";
          }
      }
  }
  #+end_example

- Loading of compiler intrinsics (should only be used in stdlib..):

  #+begin_example
  intrinsic convert as __unsafe_convert(unchecked) -> unchecked;
  #+end_example

- For future syntax / semantic changes look at [[./TODO.md][TODO.md]]

* Hello World
:PROPERTIES:
:CUSTOM_ID: hello-world
:END:
#+begin_example
// include standard library
include "std.swl"

// declaration of main entrypoint
func main() -> int {
    // call `println` function
    println("Hello, World!");
    // return success
    <- 0;
}
#+end_example

- more examples are located in the [[./swl/examples][swl/examples]]
  directory
