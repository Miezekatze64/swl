include "../../std.swl";

#link_lib "SDL2"

// hidden by SDL
struct SDL_Window   {}
struct SDL_Renderer {}

struct SDL_Event {
    int type;
    void unused;
}

struct SDL_Rect {
    int x;
    int y;
    int w;
    int h;
}
    
int SDL_EVENT_SIZE = 56;
int SDL_QUIT       = 256;
int SDL_KEYDOWN    = 768;

int SDL_INIT_VIDEO        = 32;
int SDL_WINDOW_RESIZABLE  = 32;
int WIDTH                 = 250;
int HEIGHT                = 250;

extern func SDL_Init(int flags) -> int;
extern func SDL_CreateWindow(char *title, int x, int y, int w, int h, int flags) -> SDL_Window*;
extern func SDL_CreateRenderer(SDL_Window* window, int index, int flags)         -> SDL_Renderer*;
extern func SDL_PollEvent(SDL_Event *event)                                      -> int;

extern func SDL_GetError()                                      -> char*;

extern func SDL_RenderClear(SDL_Renderer* renderer);
extern func SDL_RenderPresent(SDL_Renderer* renderer);
extern func SDL_SetRenderDrawColor(SDL_Renderer* renderer, int r, int g, int b, int a);
extern func SDL_FillRect(SDL_Renderer* renderer, SDL_Rect* rect);

extern func SDL_Delay(int ms);
extern func SDL_Quit();
extern func SDL_DestroyRenderer(SDL_Renderer* renderer);
extern func SDL_DestroyWindow(SDL_Window* renderer);

func main() -> int {
    int ret = SDL_Init(SDL_INIT_VIDEO);
    if (ret != 0) {
        println("SDL_Init() error");
        exit(1);
    }

    SDL_Window  *window = SDL_CreateWindow("Hello, World".to_cstr(), 0, 0, WIDTH, HEIGHT, SDL_WINDOW_RESIZABLE);
    if (as[long, window] == 0l) {
        print("SDL_CreateWindow() error: ");
        println(SDL_GetError());
        exit(1);
    }

    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
    if (as[int, renderer] == 0) {
        println("SDL_CreateRenderer() error: ");
        println(SDL_GetError());
        exit(1);
    }

    SDL_Event *event = as[SDL_Event*, malloc(56)];
    event->type = 420;
    
    while (true) {
        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
        SDL_RenderClear(renderer);

        SDL_Rect* rect = as[SDL_Rect*, malloc(16)];
        rect->x = 100;
        rect->y = 100;
        rect->w = 100;
        rect->h = 100;
    
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_FillRect(renderer, rect);
        
        SDL_RenderPresent(renderer);
        SDL_Delay(100);
        while (SDL_PollEvent(event) == 1) {
            if (event->type == SDL_QUIT) {
                SDL_DestroyWindow(window);
                SDL_DestroyRenderer(renderer);
                SDL_Quit();
                exit(0);
            }
        }
    }

    SDL_Quit();
    <- 0;
}
