/** SYSCALL WRAPPER FUNCTIONS (LINUX x86_64) **/

alias string = [char];

intrinsic convert      as __unsafe_convert(_a i)                           -> unchecked;
intrinsic dereference  as arrlen([unchecked] str)                          -> int;
intrinsic str_to_ptr   as arr2addr([unchecked] str)                        -> long;
intrinsic convert      as ptr2arr(long ptr)                                -> [unchecked];
intrinsic syscall      as syscall0(int index)                              -> long;
intrinsic syscall      as syscall1(int index, long val)                    -> long;
intrinsic syscall      as syscall2(int index, long val, long val2)         -> long;
intrinsic syscall      as syscall3(int index, long val, long val2, long val3)
      -> long;
intrinsic syscall      as syscall4(int index, long val, long val2, long val3,
    long val4)  -> long;

intrinsic get_args     as __get_args()                               -> [char*];

    
// reads a given number of bytes from a given file descriptor
// ------
// args:
//   fd     <- the file descriptor to read from
//   buf    <- the buffer to read into
//   nbytes <- the number of bytes to read
// returns: the number of bytes read
func read(int fd, long buf, int nbytes) -> int {
    <- as[int, syscall3(0, as[long, fd], buf, as[long, nbytes])];
}

// writes a given number of bytes to a given file descriptor
// ------
// args:
//   fd     <- the file descriptor to write to
//   buf    <- the buffer to write from
//   nbytes <- the number of bytes to write
// returns: the number of bytes written
func write(long fd, long buf, int nbytes) -> long {
    <- syscall3(1, fd, buf, as[long, nbytes]);
}

// opens a file with a given path, mode, and flags
// ------
// args:
//   path <- the path to the file to open
//   mode <- the mode to open the file with
//   flags <- the flags to open the file with
// returns: the file descriptor of the opened file
func open(string path, long flags, long mode) -> long {
    <- syscall3(2, arr2addr(path), flags, mode);
}

// closes a given file descriptor
// ------
// args:
//   fd <- the file descriptor to close   
func close(long fd) {
    syscall1(3, fd);
}

func lseek(int fd, int offset, int whence) -> long {
    <- syscall3(8, as[long, fd], as [long, offset], as[long, whence]);
}

// changes the current program break (start of heap) to given location
// -------
// args:
//   val <- the next break location (pointer)
// returns:
//   if > 0: the number of bytes the break moved.
//   if 0: the current program break
func brk(long addr) -> long {
    <- syscall1(12, addr);
}

// forks a new process
// ------
// args:
//   returns: the pid of the new process
func fork() -> int {
    <- as[int, syscall0(57)];
}

// exits the current process
// ------
// args:
//   status <- the status to exit with
func exit(int status) {
    syscall1(231, as[long, status]);
}


/* OTHER UTILITY FUNCTIONS */

// moves the current program's break (start of heap) a given number of bytes
// -------
// args:
//   inc <- the number of bytes to increment
// returns:
//   the new loctaion of the break
func _sbrk(int inc) -> long {
    long newbrk;
    long curbrk = 0l;
    
    curbrk = brk(0l);

    if (inc == 0) {
        <- curbrk;
    }
    
    newbrk = curbrk + inc;

    brk(newbrk);

    <- curbrk;
}

// #link_lib "c"
extern func malloc(int size) -> long;
extern func free(long ptr);
/*

//              --- OLD MALLOC CODE ---
// this was replaced by the libc malloc implementation

// fields used by _malloc and _free
// _m_heap_start:
//   contains the current start of the heap (program break)
// _m_location:
//   contains the last used index of the tcache
// _m_tcache:
//   contains current allocated (and freed + blocked) blocks of the malloc() and free() functions
long   _m_heap_start = 0l;
int    _m_location = 0;
[m_struct]  _m_tcache;

// the structure of the tcache (one allocated or blocked block)
// ptr:
//    the memory location of the block
// size:
//    the size (in bytes) of the block
// is_block:
//    true if block, false if hole
struct m_struct {
    long ptr;
    int size;
    bool is_block;
}

// allocates given number of bytes
// ------
// args:
//   size <- the number of bytes to allocate
// returns: the address of the allocated space
func malloc(int size) -> long {
    if (_m_heap_start == 0l) {
        _m_heap_start = _sbrk(0);
        _m_tcache     = ptr2arr(_sbrk(1000 * (8 + 8 + 1)));
    }

    int i = 0;
    while (i < _m_location) {
        m_struct index = _m_tcache[i];
        if (!index.is_block && index.size >= size) {
            _m_tcache[0].is_block = true;
            <- index.ptr;
        }
        i += 1;
    }
    
    long ptr = _sbrk(size);
    long current = ptr + size;

    _m_tcache[_m_location] = m_struct {
        ptr: ptr;
        size: size;
        is_block: true;
    };

    _m_location += 1;
    
    <- ptr;
}

// frees an earlier allocated block
// ------
// args:
//   ptr <- the address of the block to free
func free(long ptr) -> int {
    int i = 0;
    while (i < _m_location) {
        m_struct index = _m_tcache[i];
        if (ptr == index.ptr && index.is_block) {
            // free it
            _m_tcache[i].is_block = false;
            // test for merge left
            if (i > 0) {
                if (!_m_tcache[i - 1].is_block) {
                    _m_tcache[i - 1].size = _m_tcache[i - 1].size + _m_tcache[i].size;
                }
            }

            if (i < _m_location - 1) {
                if (!_m_tcache[i + 1].is_block) {
                    _m_tcache[i].size = _m_tcache[i + 1].size + _m_tcache[i].size;
                }
            }

            if (i == _m_location - 1) {
                // decrement heap space
                // FIXME: this causes segfault
//                _sbrk(-_m_tcache[i].size);
            }
            <- 0;
        }
        i += 1;
    }

    <- -1;
}
*/
// reads contents from stdin in a given array buffer, until it is full
// ------
// args:
//   buf <- the buffer
func input([char] buf) -> int {
    <- read(0, arr2addr(buf), arrlen(buf));
}

// replaces the current process with the given process
// -----
// args:
//   filename <- the filename of the process
//   argv     <- args of the process
//   envp     <- environment of the process
func execve(char *filename, [char*] argv, [char*] envp) {
    long fn   = as[long, filename];
    long argp = arr2addr(argv);
    long envv = arr2addr(envp);
    syscall3(59, fn, argp, envv);
}


struct timespec {
    long _secs;
    long nanos;
}

// sleeps a given amount of milliseconds
// -----
// args:
//   millis <- the time
func sleep(long millis) {
    timespec time = timespec {
        _secs: millis / 1000;
        nanos: (millis % 1000) * 1000000;
    };
    syscall2(35, as[long, ref time],  0l);
}


// allocates an array with a given number of bytes on the heap
// ------
// args:
//   size <- the number of bytes to allocate
// returns: an array at the newly allocated space
func alloc_array(int size) -> [unchecked] {
    long ptr     = malloc(8+size);
    deref as[long*, ptr] = as[long, size];
    [int] array = ptr2arr(ptr);
    <- array;
}

// converts a char array to a null-terminated, c-like string
// --------
// returns: the pointer to the string
func to_cstr(string self) -> char* from string {
    long ptr = malloc(arrlen(self) + 8);
    int i = 0;

    while (i < arrlen(self)) {
        deref (as[char*, ptr+i]) = self[i];
        i += 1;
    }

    deref as[char*, ptr+arrlen(self)] = as[char, 0];
    <- as[char*, ptr];
}

// returns the program's environment as a char* array
// -----
// returns: the environment
func env() -> [char*] {
    [char*] _args = __get_args();
    int argc = arrlen(_args);
    int i = 0;
    
    while (true) {
        char *ptr = _args[i + argc + 1];
        int iptr  = as[int, ptr];
        if (iptr == 0) {
            break;
        }
        i += 1;
    }

    int envc = i;
    [char*] envp = alloc_array(envc * (8 + 8) + 8);
    envp[0] = as[char*, 0];
    int i  = 0;
    while (i < envc) {
        char *env = _args[i + argc + 1]; 
        envp[i] = env;
        i += 1;
    }
    <- envp;
}

#link_lib "c"
extern system as func system_(char *ptr);
    
// runs a given command
// -----
// args:
//   command <- the command
func system(string command) {
    system_(command.to_cstr());
    <-;
    [char*] args = alloc_array(8*5);
    args[0] = "/usr/bin/sh".to_cstr();
    args[1] = "-c".to_cstr();
    args[2] = command.to_cstr();
    args[3] = as[char*, 0];

    int pid = fork();
    if (pid == 0) {
        execve("/usr/bin/sh".to_cstr(), args, env());
        exit(0);
    }
    while (true) {
       long ret = syscall4(61, as[long, pid], 0l, 0l, 0l);
       if (ret <= 0l) {
           break;
       }
       sleep(10l);
    }
}


// prints a given string to stdout
// ------
// args:
//   str <- the string to print
func print_([char] str) {
    write(1l, arr2addr(str), arrlen(str));
}

// prints a given string to stderr
// ------
// args:
//   str <- the string to print
func eprint_([char] str) {
    write(2l, arr2addr(str), arrlen(str));
}

