/* SWL STANDARD LIBRARY */

include "linux.swl";

// used intrinsics

intrinsic set_ptr      as set_ptr(_a* ptr, int val);
intrinsic set_ptr      as set_addr(int ptr, int val);

intrinsic get_args     as __get_args()                               -> [char*];

// the default string type (an array of characters)
// strings are fixed-sized arrays and so immutable
// member-functions always return a new instance
alias string = [char];

/** ARGUMENTS **/

// calculates the length of a null-terminated, c-like string
// -----
// args:
//   ptr <- the pointer to the string
// returns: the length
func cstrlen(char *ptr) -> int {
    int i    = 0;
    while (true) {
        bool* _ptr = as[bool*, as[int, ptr] + i];
        if (!(deref _ptr)) {
            break;
        }
        i += 1;
    }
    <- i;
}

// converts a null-terminated, c-like string to a char array
// --------
// args:
//   cstr <- the pointer to the string
// returns: the char array
func cstr_to_str(char *cstr) -> string {
    string str = alloc_array(cstrlen(cstr));
    int i = 0;
    while (i < cstrlen(cstr)) {
        char* _ptr = as[char*, as[int, cstr] + i];
        char c = deref _ptr;
        str[i] = c;
        i += 1;
    }
    <- str;
}

// converts a null-terminated, c-like string to a char array
// --------
// returns: the char array
func to_string(char* self) -> string from char* {
    <- cstr_to_str(self);
}
    
// converts a char array to a null-terminated, c-like string
// --------
// returns: the pointer to the string
func to_cstr(string self) -> char* from string {
    long ptr = malloc(self.len() + 8);
    int i = 0;

    while (i < self.len()) {
        deref (as[char*, ptr+i]) = self[i];
        i += 1;
    }

    deref as[char*, ptr+self.len()] = as[char, 0];
    <- as[char*, ptr];
}

// returns the program's arguments as a char* array
// -----
// returns: the args
func args() -> [char*] {
    [char*] _args = __get_args();
    <- _args;
}

// returns the program's environment as a char* array
// -----
// returns: the environment
func env() -> [char*] {
    [char*] _args = __get_args();
    int argc = arrlen(_args);
    int i = 0;
    
    while (true) {
        char *ptr = _args[i + argc + 1];
        int iptr  = as[int, ptr];
        if (iptr == 0) {
            break;
        }
        i += 1;
    }

    int envc = i;
    [char*] envp = alloc_array(envc * (8 + 8) + 8);
    envp[0] = as[char*, 0];
    int i  = 0;
    while (i < envc) {
        char *env = _args[i + argc + 1]; 
        envp[i] = env;
        i += 1;
    }
    <- envp;
}

// returns the program's environment as a char* pointer
// -----
// returns: the environment
func envp() -> char** {
    <- as[char**, arr2addr(env())];
}
    
/** MEMORY UTILS **/


// allocates an array with a given number of bytes on the heap
// ------
// args:
//   size <- the number of bytes to allocate
// returns: an array at the newly allocated space
func alloc_array(int size) -> [unchecked] {
    long ptr     = malloc(8+size);
    deref as[long*, ptr] = as[long, size];
    [int] array = ptr2arr(ptr);
    <- array;
}

// frees an earlier allocated array
// ------
// args:
//   a <- the array to free
func free_array([unchecked] a) {
    long l = arr2addr(a);
    free(l - 8);
}

// copies the contents of string b to string a (without overflow)
// ------
// args:
//   a <- the destination string
//   b <- the source string
func strcpy(string a, string b) {
    int i = 0;
    int len = min(arrlen(a), arrlen(b));
    while (i < len) {
        a[i] = b[i];
        i += 1;
    }
}

// copies the contents of string b to string a with a given offset (without overflow)
// ------
// args:
//   a     <- the destination string
//   a_off <- the destination offset
//   b     <- the source string
//   b_off <- the source offset
func strcpy_off(string a, int a_off, string b, int b_off) {
    for (int i = 0; i+a_off < arrlen(a) && i+b_off < arrlen(b); i += 1) {
        a[i+a_off] = b[i+b_off];
    }
}


/** IO UTILS **/


func get_line([char] buf) -> int {
    int bytes = 0;
    while (bytes < arrlen(buf)) {
        buf[bytes] = getch();
        if (buf[bytes] == '\n') {
            <- bytes + 1;
        } else {
            bytes += 1;
        }
    }
    <- bytes;
}

// reads a single character from stdin and returns it
// ------
// returns: the char
func getch() -> char {
    [char] buf = arr[char, 1];
    if (input(buf) == 0) {
        <- 0.to_char();
    } else {
        <- buf[0];
    }
}

// prints a given string to stdout
// ------
// args:
//   str <- the string to print
func print([char] str) {
    write(1l, arr2addr(str), arrlen(str));
}

// prints a given string to stderr
// ------
// args:
//   str <- the string to print
func eprint([char] str) {
    write(2l, arr2addr(str), arrlen(str));
}

// prints a given string to stdout, followed by a line feed
// ------
// args:
//   str <- the string to print
func println([char] str) {
    print(str);
    print("\n");
}

// prints a given string to stderr, followed by a line feed
// ------
// args:
//   str <- the string to print
func eprintln([char] str) {
    print(str);
    print("\n");
}



// runs a given command
// -----
// args:
//   command <- the command
func system(string command) {
    [char*] args = alloc_array(8*4);
    args[0] = "/usr/bin/sh".to_cstr();
    args[1] = "-c".to_cstr();
    args[2] = command.to_cstr();
    args[3] = as[char*, 0];

    int pid = fork();
    if (pid == 0) {
        execve("/usr/bin/sh".to_cstr(), args, env());
        exit(0);
    }
    while (true) {
       long ret = syscall4(61, as[long, pid], 0l, 0l, 0l);
       if (ret <= 0l) {
           break;
       }
       sleep(10l);
    }
}

/** STRING UTILS **/

// converts the char to ASCII char code
// -------
// returns: the char code
func char_code(char self) -> int from char {
    <- as[int, self];
}

// convert given char code (ASCII) to a character
// -------
// returns: the char
func to_char(int self) -> char from int {
    <- as[char, self];
}

// func format(string str)

// converts a single digit to (0-9) to corresponding ASCII character ('0'-'9')
// -------
// args:
//   i <- the digit
// returns: the character
func digit_to_ascii(int i) -> char {
    <- ('0'.char_code() + i).to_char();
}
    
// converts an integer to its string representation
// -------
// args:
//   i <- the integer
// returns: the string
func itoa(int i) -> string {
    bool negative = false;
    if (i < 0) {
        negative = true;
        i = -i;
    }
    
    int len = 0;
    int num = i;
    while (num >= 10) {
        num /= 10;
        len += 1;
    }

    if (negative) {
        len += 1;
    }

    string result = alloc_array(len + 1);
    int index = len;
    int num = i;
    while (index >= 0) {
        result[index] = digit_to_ascii(num % 10);
        num /= 10;
        index -= 1;
    }

    if (negative) {
        result[0] = '-';
    }
    
    <- result;
}

// converts the integer to a string
// -----
// returns: the string
func to_string(int self) -> string from int {
    <- itoa(self);
}
    
// converts a boolean to a string (true -> "true", false -> "false")
// ------
// args:
//   b <- the boolean
// returns: the strings
func bool_to_string(bool b) -> [char] {
    if (b) {
        <- "true";
    }
    <- "false";
}

// returns the length of the string
// ------
// returns: the length
func len(string self) -> int from string {
    <- arrlen(self);
}

// appends a given character to a string and returns the new string
// ------
// args:
//   c <- the char to append
// returns: the new string
func append(string self, char c) -> string from string {
    string new = alloc_array(self.len() + 1);
    strcpy(new, self);
    int len = self.len();
    new[len] = c;
    <- new;
}

// checks if string starts with given character
// ------
// args:
//   c <- the character
// returns: true, if string starts with c, false otherwise
func startsWith(string self, char c) -> bool from string {
    if (self.len() < 1) {
        <- false;
    }
    <- self[0] == c;
}

// checks if string ends with given character
// ------
// args:
//   c <- the character
// returns: true, if string ends with c, false otherwise
func endsWith(string self, char c) -> bool from string {
    if (self.len() < 1) {
        <- false;
    }
    <- self[self.len() - 1] == c;
}

    
/** MATH UTILS **/
    
// returns the smaller of two numbers
// ------
// args:
//   a <- the first number
//   b <- the second number
// returns: the smaller number
func min(int a, int b) -> int {
    if (a < b) {
        <- a;
    }
    <- b;
}

// returns the bigger of two numbers
// ------
// args:
//   a <- the first number
//   b <- the second number
// returns: the bigger number
func max(int a, int b) -> int {
    if (a > b) {
        <- a;
    }
    <- b;
}

// asserts a given condition is true and panics if not
// TODO(#7): replace assert() with a macro, when there are implemented
// -----
// args:
//   cond <- the condition to be checked
//   msg  <- the message to display
func assert(bool cond, string msg) {
    if (!cond) {
        eprint("Assertion failed: ");
        eprintln(msg);
        exit(1);
    }
}

// returns the absolute value of a number
// ------
// args:
//   a <- the number
// returns: the absolute value
func abs(int a) -> int {
    if (a < 0) {
        <- -a;
    }
    <- a;
}

// returns the sign of a number
// ------
// args:
//   a <- the number
// returns: the sign
func sign(int a) -> int {
    if (a < 0) {
        <- -1;
    }
    <- 1;
}

// returns the square root of a number
// ------
// args:
//   a <- the number
// returns: the square root
func sqrt(int a) -> int {
    int x = a;
    int y = 0;
    while (x >= y) {
        y = x;
        x = (a / x + x) / 2;
    }
    <- x;
}


// TYPECLASSES

// represent all types, that can be converted to a string
typeclass Showable a {
    func to_string(a val) -> string;
}


// default implementations:
instance Showable int {
    func to_string(int val) -> string {
        <- itoa(val);
    }
}

instance Showable bool {
    func to_string(bool b) -> string {
        if (b) {
            <- "true";
        } else {
            <- "false";
        }
    }
}

instance Showable char {
    func to_string(char c) -> string {
        string str = alloc_array(1);
        str[0] = c;
        <- str;
    }
 }

instance Showable [char] {
    func to_string([char] str) -> string {
        <- str;
    }
}
