/** SYSCALL WRAPPER FUNCTIONS (LINUX x86_64) **/

alias string = [char];

intrinsic convert      as __unsafe_convert(_a i)                           -> unchecked;
intrinsic dereference  as arrlen([unchecked] str)                          -> int;
intrinsic str_to_ptr   as arr2addr([unchecked] str)                        -> long;
intrinsic convert      as ptr2arr(long ptr)                                -> [unchecked];

#link_lib "kernel32"
alias HANDLE  = void*;
alias DWORD   = int;
alias LPVOID  = void*;
alias LPDWORD = DWORD*;
alias BOOL    = bool;

LPVOID NULL   = as[void*, 0];
extern func GetLastError() -> DWORD;
extern func GetStdHandle(DWORD handle) -> HANDLE;
extern func WriteConsoleA(HANDLE hConsoleOutput, LPVOID lpBuffer, DWORD nNumberOfCharsToWrite,
    LPDWORD lpNumberOfCharsWritten, LPVOID  lpReserved) -> HANDLE;
extern func ExitProcess(int uExitCode);

DWORD STD_OUTPUT_HANDLE     = 4294967284;
DWORD STD_INPUT_HANDLE      = 4294967286;
LPVOID INVALID_HANDLE_VALUE = as[LPVOID, -1l];

func print(string str) {
    HANDLE stdoutHandle = GetStdHandle(STD_OUTPUT_HANDLE);

    if (stdoutHandle != NULL && stdoutHandle != INVALID_HANDLE_VALUE) {
        DWORD written = 0;
        WriteConsoleA(stdoutHandle, as[LPVOID, arr2addr(str)], arrlen(str), ref written, NULL);
    }
}

func unimplemented(string msg) {
    print("UNIMPLEMENTED: ");
    print(msg);
    print("\n");
    exit(1);
}

func eprint(string str) {
    unimplemented("eprint");
}

extern func ReadConsoleA(HANDLE  hConsoleInput, LPVOID  lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID  pInputControl) -> BOOL;


// opens a file with a given path, mode, and flags
// ------
// args:
//   path <- the path to the file to open
//   mode <- the mode to open the file with
//   flags <- the flags to open the file with
// returns: the file descriptor of the opened file
func open(string path, long flags, long mode) -> long {
    unimplemented("open");
    <- -1l;
}

// closes a given file descriptor
// ------
// args:
//   fd <- the file descriptor to close   
func close(long fd) {
    unimplemented("close");
}

// exits the current process
// ------
// args:
//   status <- the status to exit with
func exit(int status) {
    ExitProcess(status);
}

extern system as func system_(char *ptr);
    
alias LPCSTR = char*;
extern func ShellExecuteA(LPVOID hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPVOID lpDirectory, int nShowCmd);

int SW_HIDE = 0;
#link_lib "shell32"
func system([char] cmd) {
    ShellExecuteA(NULL, "open".to_cstr(), "cmd.exe".to_cstr(), "/C echo HI".to_cstr(), NULL, SW_HIDE);
    unimplemented("system");
}


/* OTHER UTILITY FUNCTIONS */

intrinsic get_args     as __get_args()                               -> [char*];
func env() -> [int] {
    <- __unsafe_convert(0);
}
    
// allocates an array with a given number of bytes on the heap
// ------
// args:
//   size <- the number of bytes to allocate
// returns: an array at the newly allocated space
func alloc_array(int size) -> [unchecked] {
    long ptr     = malloc(8+size);
    deref as[long*, ptr] = as[long, size];
    [int] array = ptr2arr(ptr);
    <- array;
}
    
#link_lib "msvcrt"
extern func malloc(int size) -> long;
extern func free(long ptr);


// reads contents from stdin in a given array buffer, until it is full
// ------
// args:
//   buf <- the buffer
func input([char] buf) -> int {
    int chars_read = -1;
    ReadConsoleA(GetStdHandle(STD_INPUT_HANDLE), as[LPVOID, arr2addr(buf)], arrlen(buf), ref chars_read, NULL);
    <- chars_read;
}

// replaces the current process with the given process
// -----
// args:
//   filename <- the filename of the process
//   argv     <- args of the process
//   envp     <- environment of the process
//func execve(char *filename, [char*] argv, [char*] envp) {
//    unimplemented("execve");
//}

// sleeps a given amount of milliseconds
// -----
// args:
//   millis <- the time
func sleep(long millis) {
    unimplemented("sleep");
}

// converts a char array to a null-terminated, c-like string
// --------
// returns: the pointer to the string
func to_cstr(string self) -> char* from string {
    long ptr = malloc(arrlen(self) + 8);
    int i = 0;

    while (i < arrlen(self)) {
        deref (as[char*, ptr+i]) = self[i];
        i += 1;
    }

    deref as[char*, ptr+arrlen(self)] = as[char, 0];
    <- as[char*, ptr];
}
