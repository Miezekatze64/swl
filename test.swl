intrinsic syscall      as syscall1(int index, int val) -> int;
intrinsic syscall      as syscall3(int index, int val, int val2, int val3);
intrinsic str_to_ptr   as arr2addr(string str) -> int;
intrinsic dereference  as arrlen(string str)   -> int;

intrinsic convert      as arr2ptr([int] i)     -> int;
intrinsic convert      as ptr2arr(int ptr)     -> [int];
intrinsic convert      as ptr2str(int ptr)     -> [char];

intrinsic set_ptr      as set_ptr(int ptr, int val);

alias string = [char];

func brk(int val) -> int {
     <- syscall1(12, val);
}

func sbrk(int inc) -> int {
    int newbrk;
    int oldbrk = 0;
    int curbrk = 0;

    if (oldbrk == 0) {
       curbrk = brk(0);
       oldbrk = curbrk;
    }

    if (inc == 0) {
       <- curbrk;
    }

    newbrk = curbrk + inc;

    if (brk(newbrk) == curbrk) {
       <- (-1);
    }

    oldbrk = curbrk;
    curbrk = newbrk;
    <- oldbrk;
}


[int]  blocks;
[bool] is_block;
func _malloc(int size) -> int {
     if (arr2ptr(blocks) == 0) {
        blocks = ptr2arr(sbrk(100 * 8));
     }

     // TODO: search for holes
     int ptr = sbrk(size);
     
     <- ptr;
}

func ptr_to_string(int ptr, int sz) -> [int] {
     set_ptr(ptr, sz);
     <- ptr2arr(ptr);
}

func strcpy(string a, string b) {
     // TODO: use loops for this...
     _strcpy(a, b, 0);
}

func _strcpy(string a, string b, int index) {
     if (index == arrlen(b)) {
        <-;
     }
     a[index] = b[index];
     _strcpy(a, b, index+1);
}

func bool_to_string(bool b) -> string {
     if (b) {
        <- "true";
     }
     <- "false";
}

func exit(int code) {
     syscall1(60, code);
}

func print([char] str) {
    syscall3(1, 1, arr2addr(str), arrlen(str));
}

func read([char] str) {
    syscall3(0, 0, arr2addr(str), arrlen(str));
}

func main() -> int {
//   [int] ptr = ptr2arr(_malloc(8));
//   int ptr2 = _malloc(4);

//   ptr[0] = 1;
//    set_ptr(ptr, 8);

//    [int] array = ptr2arr(ptr);
//    array[0] = 1;
//    array[99] = 2;


//    string b = bool_to_string(true);
    <- 0;
}
